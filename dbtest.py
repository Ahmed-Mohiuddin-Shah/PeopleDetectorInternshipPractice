import sqlite3

def init_db():
        # Create a connection to the database
    conn = sqlite3.connect('datbase.db')

    # Create a cursor
    c = conn.cursor()

    # Create a table
    c.execute("""CREATE TABLE IF NOT EXISTS people (
        id INTEGER PRIMARY KEY,
        encodings BLOB
    )""")

    c.execute("""CREATE TABLE IF NOT EXISTS shapes (
        id INTEGER PRIMARY KEY,
        start_x INTEGER,
        start_y INTEGER,
        end_x INTEGER,
        end_y INTEGER,
        points TEXT,
        shape TEXT
    )""")

    c.execute("""CREATE TABLE IF NOT EXISTS detectedtimestamps (
        id INTEGER PRIMARY KEY,
        timestamp TEXT,
        person_id INTEGER
    )""")

    # Commit the connection
    conn.commit()
    conn.close()
def get_shapes():
    conn = sqlite3.connect('datbase.db')
    c = conn.cursor()
    c.execute("SELECT * FROM shapes")
    rows = c.fetchall()
    conn.close()

    info = {}
    shape_info= {}

    #make dictionary

    for row in rows:
        shape_info['start_x'] = row[1]
        shape_info['start_y'] = row[2]
        shape_info['end_x'] = row[3]
        shape_info['end_y'] = row[4]
        points = row[5].split(",")
        shape_info['points'] = points
        shape_info['shape'] = row[6]
        info[row[0]] = shape_info
    return info


def fill_test_embedding():
    conn = sqlite3.connect('datbase.db')
    c = conn.cursor()
    c.execute("INSERT INTO people (encodings) VALUES ('0.4721561074256897, 0.7093085050582886, -1.271894931793213, -0.24037212133407593, 0.9954830408096313, 0.24176979064941406, 0.3408595025539398, -0.9830834269523621, -0.18150484561920166, 0.7532424330711365, 0.6379269957542419, -1.512181282043457, -0.23296284675598145, -1.2582906484603882, 0.15767617523670197, 0.6717166304588318, 1.1658345460891724, -0.04031587764620781, -0.09003160893917084, 0.24222472310066223, 0.7764118909835815, 0.7408214807510376, 0.28017371892929077, 0.44257599115371704, 0.6912270188331604, 0.7711471319198608, -0.15833477675914764, -0.5167852640151978, -0.02391662448644638, 0.5788950324058533, 1.8711835145950317, -0.5862557291984558, 1.7297853231430054, 0.041425712406635284, 1.3031171560287476, 0.28733590245246887, 0.9982821941375732, -1.734855055809021, 0.6218652725219727, -0.3298087418079376, -0.8338161110877991, 0.6865018010139465, 1.0410518646240234, -0.03567778691649437, 1.5524195432662964, -0.4761487543582916, -0.9209082722663879, 0.6819373369216919, 0.6968768835067749, 0.0611889585852623, 0.26038700342178345, -0.6843823790550232, -1.3721230030059814, -0.6291655898094177, -0.29276326298713684, 0.5879290103912354, 1.0813769102096558, -0.33865681290626526, -0.3488779664039612, -0.5188624262809753, 0.006759211421012878, -0.05381504446268082, 0.9193647503852844, 0.9779277443885803, -0.521538257598877, 0.13912472128868103, -0.5012869834899902, 0.6060128211975098, 1.1461546421051025, -0.712403416633606, 1.09449303150177, -0.4667973518371582, -1.5515459775924683, -0.30760499835014343, 0.6307036876678467, -0.31252190470695496, 0.15273723006248474, -0.7132189869880676, 0.3460865914821625, -0.10251537710428238, -0.1620849072933197, 1.6732282638549805, 0.24907909333705902, 0.01332160271704197, 1.174735426902771, -0.0815008357167244, -0.8969358205795288, 0.23760618269443512, -1.1750472784042358, -0.30326035618782043, -1.0192947387695312, 1.5365512371063232, 0.7922396063804626, 2.1367740631103516, -0.4467948079109192, -0.7088211178779602, -1.4577668905258179, 0.23209165036678314, -2.169285535812378, 0.3705173134803772, 0.5184202194213867, -0.8742550015449524, -0.04852445423603058, -0.8221447467803955, -2.0926783084869385, -0.7757838368415833, -1.042629361152649, -0.7256091833114624, -1.8147515058517456, -0.3332882225513458, -1.283154845237732, 0.5480118989944458, 1.101914644241333, 0.18062889575958252, 0.5391629338264465, 0.45812955498695374, 1.3130192756652832, -0.8592901825904846, 0.3039165735244751, 2.0973856449127197, 1.4675099849700928, -0.04507052153348923, 1.7840741872787476, -0.6769320964813232, -0.07296787202358246, -1.137460470199585, 0.8375968337059021, 0.20292095839977264')")
    conn.commit()
    conn.close()

def fill_test_shapes():
    conn = sqlite3.connect('datbase.db')
    c = conn.cursor()
    c.execute("INSERT INTO shapes (start_x, end_x, start_y, end_y, points, shape) VALUES (0, 100, 0, 100, '', 'rectangle')")
    conn.commit()
    conn.close()


init_db()
fill_test_embedding()
fill_test_shapes()

print(get_shapes())

# print(get_embeddings())
